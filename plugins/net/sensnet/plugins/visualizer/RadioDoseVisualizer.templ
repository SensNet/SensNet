<div class="timecontrol">
<a class="btn btn-default btn-xs" id="playbutton">
  <span id="playglyph" class="glyphicon glyphicon-play" aria-hidden="true"></span>
</a><input style="float: right; display: inline" type="range" id="timeselect" value="1000" max="1000"/>
</div>
<div id="half-map"></div>
<div id="node-overview">
<h4>Sensors providing radio dose measurement</h4>
</div>
<script src="/static/js/leaflet.js"></script>
<script src="/static/js/heatmap.min.js"></script>
<script src="/static/js/leaflet-heatmap.js"></script>
<script src="/static/js/date.format.js"></script>
<script>
var minDate;
var currentDate = "now";
window.onload = function() {
$.getJSON("/api/smallestdate?class=3&type=3", function( data ) {
	minDate = data[0]["eraliest"];
});
var baseLayer = L.tileLayer(
'<?=$mapsource?>',{
attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>',
maxZoom: 18
}
);
var cfg = {
// radius should be small ONLY if scaleRadius is true (or small radius is intended)
"radius": 20,
"maxOpacity": .8,
// scales the radius based on map zoom
"scaleRadius": false,
// if set to false the heatmap uses the global maximum for colorization
// if activated: uses the data maximum within the current map boundaries
// (there will always be a red spot with useLocalExtremas true)
"useLocalExtrema": false,
// which field name in your data represents the latitude - default "lat"
latField: 'lat',
// which field name in your data represents the longitude - default "lng"
lngField: 'lng',
// which field name in your data represents the data value - default "value"
valueField: 'count'
};
var heatmapLayer = new HeatmapOverlay(cfg);
var map = new L.Map('half-map', {
center: new L.LatLng(51.00, 10),
zoom: 4,
layers: [baseLayer, heatmapLayer]
});
var markers = new L.FeatureGroup();
map.addLayer(markers);
var refresh = function() {
	var old = markers;
	markers = new L.FeatureGroup();
	$.getJSON("/api/json/sensors/radiodose?near="+currentDate, function( data ) {
		var dat = [];
		for(var i = 0; i < data.length; i++) {
			var lat = makeCoordinate(data[i]["lat"]);
			var lng = makeCoordinate(data[i]["lng"]);
			var m = L.marker([lat, lng]);
			var popup = L.popup().setLatLng([lat, lng])
		    .setContent("<p style='text-align:center'><b>Sensor #"+data[i]["uid"]+"</b><br/>"+data[i]["count"] +"CPM<br/>~"+data[i]["count"]/100+"ÂµSv/h</p>");
			m.bindPopup(popup);
				markers.addLayer(m);
				dat.push({lat: lat, lng: lng, count: data[i]["count"]});
				$.getJSON("/api/json/nodes?forsensor="+data[i]["uid"], function(data) {
					if(data.length == 0) {
						//TODO handle unknown nodes!
						return;
					}
					var overview = $("#node-overview");
					
					
						if($("#node"+data[0]["uid"]).length == 0) {
							var panel = document.createElement('div');
							panel.setAttribute("id", "node"+data[0]["uid"]);
							panel.setAttribute("class", "panel panel-default");
							var heading = document.createElement('div');
							heading.setAttribute("class", "panel-heading");
							heading.innerHTML = data[0]["name"];
							var body = document.createElement('div');
							body.setAttribute("class", "panel-body");
							var bodyText = document.createElement("p");
							bodyText.innerHTML = data[0]["description"];
							var table = document.createElement("table");
							table.setAttribute("class", "table");
							table.setAttribute("id", "snesorsby"+data[0]["uid"]);
							table.innerHTML = "<tr><th>Sensor #</th><th>Battery</th><th>Last seen</th></tr>";
							$(body).append(bodyText);
							var pan = $(panel);
							pan.append(heading);
							pan.append(body);
							pan.append(table);
							overview.append(panel);
					}
						var pan = $("#snesorsby"+data[0]["uid"]);
						$.getJSON("/api/json/nodes?sensorsbynode="+data[0]["uid"]+"&type=3&class=3", function(data){
							for(var j = 0; j< data.length;j++) {	
								if($("#sensor_"+data[j]["uid"]).length == 0) {	
								var row = document.createElement("tr");
									row.setAttribute("id", "sensor_"+data[j]["uid"]);
							var id = document.createElement("td");
							id.innerHTML = data[j]["uid"];
							$(row).append(id);
							var battery = document.createElement("td");
							battery.innerHTML = data[j]["battery"];
							$(row).append(battery);
							var lastseen = document.createElement("td");
							lastseen.innerHTML = new Date(data[j]["lastseen"] * 1000).format('Y-m-d h:i:s e');
							$(row).append(lastseen);
							pan.append(row);
								} else {
									var row = $("#sensor_"+data[j]["uid"]);
									row.empty();
							var id = document.createElement("td");
							id.innerHTML = data[j]["uid"];
							$(row).append(id);
							var battery = document.createElement("td");
							battery.innerHTML = data[j]["battery"];
							$(row).append(battery);
							var lastseen = document.createElement("td");
							lastseen.innerHTML = new Date(data[j]["lastseen"] * 1000).format('Y-m-d h:i:s e');
							$(row).append(lastseen);
								}
						}
						});
						
				});	
		}
		heatmapLayer.setData({
			max: 100,
			data: dat
			});
		map.removeLayer(old);
		});
	
	map.addLayer(markers);
	};
refresh();
setInterval(function() {refresh();} , 10000);
function update() {
	if(document.getElementById("timeselect").value == 1000) {
		currentDate="now";
		refresh();
		return;
	}
	$.getJSON("/api/json/serverstatus", function( data ) {
			var serverTimeCurrent = data[0]["systemtime"];
			var newDate = Math.round(minDate + (((serverTimeCurrent - minDate) / 1000)*document.getElementById("timeselect").value));
			currentDate = newDate;
			refresh();
	});
	}
var playing = false;
var playinterval;
function play() {
	if(!playing) {
		playing=true;
	document.getElementById("playglyph").setAttribute("class", 'glyphicon glyphicon-pause');
	playinterval = setInterval(function() {
		document.getElementById("timeselect").value =  parseInt(document.getElementById("timeselect").value)+1;
		update();
		if(parseInt(document.getElementById("timeselect").value) == 1000) {
			document.getElementById("timeselect").value = 0;
		}
	} , 400);
	} else {
		clearInterval(playinterval);
		playing = false;
		document.getElementById("playglyph").setAttribute("class", 'glyphicon glyphicon-play');
	}
}
$("#timeselect").on("change", function() { update(); });
$("#playbutton").on("click", function() { play(); });
}
function makeCoordinate(coord) {
	var tmp = coord +"";
	while(tmp.length < 6) {
		tmp = tmp + "0";
	}
	tmp = tmp.substring(0, tmp.length - 5) + "."
			+ tmp.substring(tmp.length - 5, tmp.length);
	return tmp;
}
</script>