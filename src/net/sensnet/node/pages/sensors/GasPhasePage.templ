<div id="modalcont"></div>
<div id="half-map"></div>
<div id="node-overview">
<? foreach($nodes) { ?>
<div class="panel panel-default">
  <div class="panel-heading"><?=$sensname?></div>
  <div class="panel-body">
    <p><?=$sensdescr?></p>
  </div>

  <!-- Table -->
  <table class="table">
	<tr><th>Sensor #</th><th>Battery</th><th>Last seen</th></tr>
	<? foreach($sensors) {?>
		<tr class="mouse-click" data-lat="<?=$lat?>" data-id="<?=$sensorid?>" data-long="<?=$long?>"><td><?=$sensorid?></td><td><?=$sensorbattery?></td><td><?=$lastseen?></td></tr>
	<? } ?>
  </table>
</div>
<? } ?>
</div>
<script src="/static/js/leaflet.js"></script>
<script src="/static/js/heatmap.min.js"></script>
<script src="/static/js/chart.js"></script>
<script src="/static/js/leaflet-heatmap.js"></script>
<script>
var options = {

    ///Boolean - Whether grid lines are shown across the chart
    scaleShowGridLines : true,

    //String - Colour of the grid lines
    scaleGridLineColor : "rgba(0,0,0,.05)",

    //Number - Width of the grid lines
    scaleGridLineWidth : 1,

    //Boolean - Whether to show horizontal lines (except X axis)
    scaleShowHorizontalLines: true,

    //Boolean - Whether to show vertical lines (except Y axis)
    scaleShowVerticalLines: true,

    //Boolean - Whether the line is curved between points
    bezierCurve : true,

    //Number - Tension of the bezier curve between points
    bezierCurveTension : 0.4,

    //Boolean - Whether to show a dot for each point
    pointDot : true,

    //Number - Radius of each point dot in pixels
    pointDotRadius : 4,

    //Number - Pixel width of point dot stroke
    pointDotStrokeWidth : 1,

    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
    pointHitDetectionRadius : 20,

    //Boolean - Whether to show a stroke for datasets
    datasetStroke : true,

    //Number - Pixel width of dataset stroke
    datasetStrokeWidth : 2,

    //Boolean - Whether to fill the dataset with a colour
    datasetFill : true,

    //String - A legend template
    legendTemplate : "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].strokeColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"
};
		var map = L.map('half-map').setView([51.00, 10], 4);

		L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
			maxZoom: 19,
			attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a>, ' +
				'<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>'
		}).addTo(map);


		$("tr[data-lat]").each(function(index, element) {
		var popup = L.popup()
    .setLatLng([$(element).attr('data-lat'), $(element).attr('data-long')])
    .setContent("<b>Sensor #"+$(element).attr('data-id')+'</b>')
			.bindPopup(popup).on('click', function(e){
			$(element).fadeTo('fast', 0).fadeTo('middle', 1.0).fadeTo('middle', 0).fadeTo('middle', 1.0);
			});
			
		$(element).click(function() {
			popup.openOn(map);
			$("#modalcont").get(0).innnerHtml = '<div class="modal fade"><div class="modal-dialog"><div class="modal-content"><div class="modal-header"><button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button><h4 class="modal-title">Phaseshift at</h4></div><div class="modal-body"></div><div class="modal-footer"><button type="button" class="btn btn-default" data-dismiss="modal">Close</button><div></div><!-- /.modal-content --></div><!-- /.modal-dialog --></div><!-- /.modal -->';
$('#modalcont').modal('toggle');
			var ctx = $(elem).get(0).getContext("2d");
// This will get the first returned node in the jQuery collection.
var jsonData = $.getJSON('http://localhost:8081/api/json/sensors/gas/phaseshift');
var data = {
    labels: ["01", "02", "03", "04", "05", "06", "07","08","09","10","11","12","13","14","15","16","17","18","19","20"],
    datasets: [
        {
            label: "Phse shift in Â°",
            fillColor: "rgba(220,220,220,0.2)",
            strokeColor: "rgba(220,220,220,1)",
            pointColor: "rgba(220,220,220,1)",
            pointStrokeColor: "#fff",
            pointHighlightFill: "#fff",
            pointHighlightStroke: "rgba(220,220,220,1)",
            data: jsonData        }
        ]};
var myLineChart = new Chart(ctx).Line(data, options);
		});
		});
	</script>